{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["convertFromMilliseconds","milliseconds","hours","minutes","seconds","concat","parseInt","Hour","props","react_default","a","createElement","className","time","Minute","Second","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStartClick","event","state","pending","clearInterval","intervalId","setState","setInterval","timeMilliseconds","handleResetClick","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAKA,SAASA,EAAwBC,GAC/B,IAAIC,EAAQD,EAAY,KACpBE,EAAWF,EAAY,IAAY,GACnCG,EAAWH,EAAa,IAAM,GAClC,MAAM,CACJC,MAAQA,EAAM,GAAN,IAAAG,OAAeC,SAASJ,IAASI,SAASJ,GAClDC,QAAUA,EAAQ,GAAR,IAAAE,OAAiBC,SAASH,IAAWG,SAASH,GACxDC,QAAUA,EAAQ,GAAR,IAAAC,OAAiBC,SAASF,IAAWE,SAASF,IAO5D,SAASG,EAAKC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,KAAKX,MAAhB,KACAO,EAAAC,EAAAC,cAAA,kBAKN,SAASG,EAAON,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,KAAKV,QAAhB,KACAM,EAAAC,EAAAC,cAAA,oBAKN,SAASI,EAAOP,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,KAAKT,SAChBK,EAAAC,EAAAC,cAAA,wBAgESK,cAxDb,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KAQRgB,iBAAmB,SAACC,GACfR,EAAKS,MAAMC,SACZC,cAAcX,EAAKY,YACnBZ,EAAKa,SAAU,CAACH,SAAWV,EAAKS,MAAMC,YAEtCV,EAAKa,SAAS,CAACH,SAAWV,EAAKS,MAAMC,UACrCV,EAAKY,WAAaE,YAAY,WAC1Bd,EAAKa,SAAS,CACZE,iBAAmBf,EAAKS,MAAMM,iBAAiB,IAC/CnB,KAAOb,EAAwBiB,EAAKS,MAAMM,iBAAiB,QAE/D,OApBYf,EA0BlBgB,iBAAmB,SAACR,GAChBG,cAAcX,EAAKY,YACnBZ,EAAKa,SAAS,CACVH,SAAU,EACVK,iBAAmB,EACnBnB,KAAOb,EAAwB,MA7BrCiB,EAAKS,MAAQ,CACXC,SAAU,EACVK,iBAAmB,SACnBnB,KAAOb,EAAwB,WALjBiB,wEAuChB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACJ,EAAD,CAAMM,KAAMO,KAAKM,MAAMb,OACvBJ,EAAAC,EAAAC,cAACG,EAAD,CAAQD,KAAMO,KAAKM,MAAMb,OACzBJ,EAAAC,EAAAC,cAACI,EAAD,CAAQF,KAAMO,KAAKM,MAAMb,QAE3BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQuB,QAASd,KAAKI,kBAAmBJ,KAAKM,MAAMC,QAAU,OAAS,SACvElB,EAAAC,EAAAC,cAAA,UAAQuB,QAASd,KAAKa,kBAAtB,kBAjDQE,IAAMC,WCpCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.86c294ae.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nfunction convertFromMilliseconds(milliseconds){\n  let hours = milliseconds/(1000*3600);\n  let minutes = (milliseconds/(1000*60))%60;\n  let seconds = (milliseconds/1000)%60;\n  return{\n    hours : hours<10 ? `0${parseInt(hours)}`:parseInt(hours),\n    minutes : minutes<10 ? `0${parseInt(minutes)}`:parseInt(minutes),\n    seconds : seconds<10 ? `0${parseInt(seconds)}`:parseInt(seconds)\n  }\n}\n\n\n\n\nfunction Hour(props) {\n  return (\n    <div className=\"time\">\n      <h1>{props.time.hours}:</h1>\n      <p>Hour</p>\n    </div>\n  );\n}\n\nfunction Minute(props) {\n  return (\n    <div className=\"time\">\n      <h1>{props.time.minutes}:</h1>\n      <p>Minute</p>\n    </div>\n  );\n}\n\nfunction Second(props) {\n  return (\n    <div className=\"time\">\n      <h1>{props.time.seconds}</h1>\n      <p>Second</p>\n    </div>\n  );\n}\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = { \n      pending : false,\n      timeMilliseconds : 38768668,\n      time : convertFromMilliseconds(38768668)\n    };\n  }\n\n  handleStartClick = (event)=>{\n    if(this.state.pending){\n      clearInterval(this.intervalId);\n      this.setState( {pending : !this.state.pending});\n    }else{\n      this.setState({pending : !this.state.pending});\n      this.intervalId = setInterval(()=>{\n          this.setState({\n            timeMilliseconds : this.state.timeMilliseconds+1000,\n            time : convertFromMilliseconds(this.state.timeMilliseconds+1000)})  \n        },\n        1000\n      )\n    }\n    \n  }\n\n  handleResetClick = (event)=>{\n      clearInterval(this.intervalId);   \n      this.setState({\n          pending : false,\n          timeMilliseconds : 0,\n          time : convertFromMilliseconds(0)\n      });\n\n    \n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"d-flex\">\n          <Hour time={this.state.time}/>\n          <Minute time={this.state.time}/>\n          <Second time={this.state.time}/>\n        </div>\n        <div className=\"man-buttons\">\n          <button onClick={this.handleStartClick}>{this.state.pending ? 'Stop' : 'Start'}</button>\n          <button onClick={this.handleResetClick}>Reset</button>\n        </div>\n      </div>\n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}